`timescale 1ns / 1ps

module InstMem (input [5:0] addr, output [31:0] data_out);
 reg [31:0] mem [0:63];
 assign data_out = mem[addr];


initial begin
// // Testing Program 1
// // testing LW, SW, ADD, SUB, AND, OR, BEQ, LUI, AUIPC, JAL, JALR, BNE, BLT, BGE

//mem[0]=32'b00000000000000000010001010000011;
//mem[1]=32'b00000000010000000010001100000011;
//mem[2]=32'b00000000011000101000001110110011;
//mem[3]=32'b00000000011000111110111000110011;
//mem[4]=32'b00000000011111100111111010110011;
//mem[5]=32'b01000001110111100000111100110011;
//mem[6]=32'b00000000010111110110111110110011;
//mem[7]=32'b00000001111100000010010000100011;
//mem[8]=32'b00000001110011100000111000110011;
//mem[9]=32'b00000000110000000010111110000011;
//mem[10]=32'b00000001000000000010001100000011;
//mem[11]=32'b01000000011011111000111110110011;
//mem[12]=32'b00000000000011111000010001100011;
//mem[13]=32'b11111110000000000000110011100011;
//mem[14]=32'b00000000000000000000000000110011;
//mem[15]=32'b00000000000000000011111110110111; // lui x31, 3 // 0x00003fb7
//mem[16]=32'b00000000000000000011111110010111; // auipc x31, 3 // 0x00003f97
//mem[17]=32'b00000000100000000000111111101111; // jal x31, 8 // 0x00800fef // at pc=68
//mem[18]=32'b00000000000000000000000000110011; // add x0, x0, x0 // 0x00000033 // at pc=72 // skipper
//mem[19]=32'b00000001010000000010111100000011; // lw x30, 20(x0) // 0x01402f03 // x30 = mem[5] = 32'd88 // at pc=76
//mem[20]=32'b00000000000011110000111111100111; // jalr x31, 0(x30) // 0x000f0fe7 // at pc=80
//mem[21]=32'b00000000000000000000000000110011; // add x0, x0, x0 // 0x00000033 // at pc=84 // skipped
//mem[22]=32'b00000001111011110001010001100011; // bne x30, x30, 8 // 0x01ef1463 // will not branch // at pc=88
//mem[23]=32'b00000001111111110001010001100011; // bne x30, x31, 8 // 0x01ff1463 // will branch // at pc=92
//mem[24]=32'b00000000000000000000000000110011; // add x0, x0, x0 // 0x00000033 // skipped // at pc=96
//mem[25]=32'b00000001111111110100010001100011; // blt x30, x31, 8 // 0x01ff4463 // will not branch // at pc=100
//mem[26]=32'b00000001111011111100010001100011; // blt x31, x30, 8 // 0x01efc463 // will branch // at pc=104
//mem[27]=32'b00000000000000000000000000110011; // add x0, x0, x0 // 0x00000033 // skipped // at pc=108
//mem[28]=32'b00000001111011111101010001100011; // bge x31, x30, 8 // 0x01efd463 // will not branch // at pc=112
//mem[29]=32'b00000001111011110101010001100011; // bge x30, x30, 8 // 0x01ef5463 // will branch // at pc=116
//mem[30]=32'b00000000000000000000000000110011; // add x0, x0, x0 // 0x00000033 // skipped // at pc=120
//mem[31]=32'b00000001111111110101010001100011; // bge x30, x31, 8 // 0x01ff5463 // will branch // at pc=124

// // Testing Program 2
// // testing BLTU, BGEU, ADDI, SLLI, SLTI, SLTIU, XORI

//mem[0]=32'b00000000000000000010001010000011;
//mem[1]=32'b00000000010000000010001100000011;
//mem[2]=32'b00000000011000101000001110110011;
//mem[3]=32'b00000000011000111110111000110011;
//mem[4]=32'b00000000011111100111111010110011;
//mem[5]=32'b01000001110111100000111100110011;
//mem[6]=32'b00000000010111110110111110110011;
//mem[7]=32'b00000001111100000010010000100011;
//mem[8]=32'b00000001110011100000111000110011;
//mem[9]=32'b00000000110000000010111110000011;
//mem[10]=32'b00000001000000000010001100000011;
//mem[11]=32'b01000000011011111000111110110011;
//mem[12]=32'b00000000000011111000010001100011;
//mem[13]=32'b11111110000000000000110011100011;
//mem[14]=32'b00000000000000000000000000110011;
//mem[15]=32'b01000001110111011000110110110011; // sub x27, x27, x29 // 0x41dd8db3 // x27 = -10
//mem[16]=32'b00000001110011011110010001100011; // bltu x27, x28, 8 // 0x01cde463 // will not branch // at pc=64
//mem[17]=32'b00000001101111100110010001100011; // bltu x28, x27, 8 // 0x01be6463 // will branch // at pc=68
//mem[18]=32'b00000000000000000000000000110011; // add x0, x0, x0 // 0x00000033 // at pc=72 // skipped
//mem[19]=32'b00000001101111100111010001100011; // bgeu x28, x27, 8 // 0x01be7463 // at pc=76 // will not branch
//mem[20]=32'b00000001110011100111010001100011; // bgeu x28, x28, 8 // 0x01ce7463 // at pc=80 // will branch
//mem[21]=32'b00000000000000000000000000110011; // add x0, x0, x0 // 0x00000033 // at pc=84 // skipped
//mem[22]=32'b00000001110011011111010001100011; // bgeu x27, x28, 8 // 0x01cdf463 // at pc=88 // will branch
//mem[23]=32'b00000000000000000000000000110011; // add x0, x0, x0 // 0x00000033 // at pc=92 // skipped
//mem[24]=32'b00000001010011011000110110010011; // addi x27, x27, 20 // 0x014d8d93 // at pc=96 // x27=32'd10
//mem[25]=32'b11111110110011011000110110010011; // addi x27, x27, -20 // 0xfecd8d93 // at pc=100 // x27 = -10
//mem[26]=32'b00000000001011110001111100010011; // slli x30, x30, 2 // 0x002f1f13 // at pc=104 // x30 = 5 << 2 = 20
//mem[27]=32'b00000000010111100010111100010011; // slti x30, x28, 5 // 0x005e2f13 // at pc=108 // x30 = 0
//mem[28]=32'b00000011001011100010111100010011; // slti x30, x28, 50 // 0x032e2f13 // at pc=112 // x30=1
//mem[29]=32'b11111010000011011011111100010011; // sltiu x30, x27, -96 // sltiu x30, x27, 4294967200 // at pc=116 // x30 = 0
//mem[30]=32'b11111111101011011011111100010011; // sltiu x30, x27, -6 // sltiu x30, x27, 4294967290 // at pc=120 // x30 = 1
//mem[31]=32'b00000000001111101100111100010011; // xori x30, x29, 3 // 0x003ecf13 // at pc=124 // x30 = 32'd9



// // Testing Program 3
// // testing SRLI, SRAI, ORI, ANDI, SLL, SLT, SLTU, XOR, SRL

//mem[0]=32'b00000000000000000010001010000011;
//mem[1]=32'b00000000010000000010001100000011;
//mem[2]=32'b00000000011000101000001110110011;
//mem[3]=32'b00000000011000111110111000110011;
//mem[4]=32'b00000000011111100111111010110011;
//mem[5]=32'b01000001110111100000111100110011;
//mem[6]=32'b00000000010111110110111110110011;
//mem[7]=32'b00000001111100000010010000100011;
//mem[8]=32'b00000001110011100000111000110011;
//mem[9]=32'b00000000110000000010111110000011;
//mem[10]=32'b00000001000000000010001100000011;
//mem[11]=32'b01000000011011111000111110110011;
//mem[12]=32'b00000000000011111000010001100011;
//mem[13]=32'b11111110000000000000110011100011;
//mem[14]=32'b00000000000000000000000000110011;
//mem[15]=32'b00000000001000111101111100010011; // srli x30, x7, 2 // 0x0023df13 // at pc=60 // x30 = 10 >> 2 = 2
//mem[16]=32'b01000001110011011000110110110011; // sub x27, x27, x28 // 0x41cd8db3 // at pc=64 // x27 = -30
//mem[17]=32'b00000000001011011101111100010011; // srli x30, x27, 2 // 0x002ddf13 // at pc=68 // x30 = (-30) >> 2 = 4294967286 >> 4 = 1,073,741,816 
//mem[18]=32'b01000000001011100101111100010011; // srai x30, x28, 2 // 0x402e5f13 // at pc=72 // x30 = 30 >> 2 = 7
//mem[19]=32'b01000000001011011101111100010011; // srai x30, x27, 2 // 0x402ddf13 // at pc=76 // x30 = -30 >>> 2 = -8
//mem[20]=32'b00001101001011100110111100010011; // ori x30, x28, 210 // 0x0d2e6f13 // at pc=80 // x30 = 32'd222
//mem[21]=32'b00001101001011100111111100010011; // andi x30, x28, 210 // 0x0d2e7f13 // at pc=84 // x30=32'd18
//mem[22]=32'b00000001100000000010110100000011; // lw x26, 24(x0) // 0x01802d03 // at pc=88 // x26 = 32'b10101010101010
//mem[23]=32'b00000000011000111001111100110011; // sll x30, x7, x6 // 0x00639f33 // at pc=92 // x30= 10 << 1 = 20
//mem[24]=32'b00000000011000101010111100110011; // slt x30, x5, x6 // 0x0062af33 // at pc=96 // x30=0
//mem[25]=32'b00000000011000110010111100110011; // slt x30, x6, x6 // 0x00632f33 // at pc=100 // x30=0
//mem[26]=32'b00000000010100110010111100110011; // slt x30, x6, x5 // 0x00532f33 // at pc=104 // x30=1
//mem[27]=32'b00000000011011011011111100110011; // sltu x30, x27, x6 // 0x006dbf33 // at pc=108 // x30=0
//mem[28]=32'b00000001101100110011111100110011; // sltu x30, x6, x27 // 0x01b33f33 // at pc=112 // x30=1
//mem[29]=32'b00000000011100101100111100110011; // xor x30, x5, x7 // 0x0072cf33 // at pc=116 // x30 = 32'd9
//mem[30]=32'b00000000011011100101111100110011; // srl x30, x28, x6 // 0x006e5f33 // at pc=120 // x30 = 30 >> 1 = 15
//mem[31]=32'b00000000011011011101111100110011; // srl x30, x27, x6 // 0x006ddf33 // at pc=124 // x30 = -30 >> 1 = 4294967266 >> 1 = 2,147,483,633


// // Testing Program 4
// // testing SRA

mem[0]=32'b00000000000000000010001010000011;
mem[1]=32'b00000000010000000010001100000011;
mem[2]=32'b00000000011000101000001110110011;
mem[3]=32'b00000000011000111110111000110011;
mem[4]=32'b00000000011111100111111010110011;
mem[5]=32'b01000001110111100000111100110011;
mem[6]=32'b00000000010111110110111110110011;
mem[7]=32'b00000001111100000010010000100011;
mem[8]=32'b00000001110011100000111000110011;
mem[9]=32'b00000000110000000010111110000011;
mem[10]=32'b00000001000000000010001100000011;
mem[11]=32'b01000000011011111000111110110011;
mem[12]=32'b00000000000011111000010001100011;
mem[13]=32'b11111110000000000000110011100011;
mem[14]=32'b00000000000000000000000000110011;
mem[15]=32'b01000001110011011000110110110011; // sub x27, x27, x28 // 0x41cd8db3 // at pc=64 // x27 = -30
mem[16]=32'b01000000011011011101111100110011; // sra x30, x27, x6 // 0x406ddf33 // at pc=60 // x30 = x30 = -30 >>> 1 = -15

 end
 
endmodule